import {useAuthStore} from "@/services/stores/auth-store";
import {useChannelStore} from "@/services/stores/channel-store";
import {
    Button, Checkbox, Text, useToast,
} from "@chakra-ui/react";
import {MouseEventHandler, useEffect, useRef, useState} from "react";
import {useForm} from "react-hook-form";
import {channelProvider} from "@/services/providers/channel-provider";
import {authProvider} from "@/services/providers/auth-provider";
import Head from "next/head";
import {inter} from "@/pages/_app";
import {router} from "next/client";
import {TiArrowBack} from "react-icons/ti";
import {palette} from "@/theme/palette";
import createChannelStyle from "@/styles/CreateChannel.module.css";

const Edit = () => {
    const toast = useToast();
    const { user, allUsers, setUsers } = useAuthStore();
    const { channel, setChannel } = useChannelStore();
    const { channelID } = router.query;
    const id = Array.isArray(channelID) ? channelID[0] : channelID;

    useEffect(() => {
        const token = localStorage.getItem('accessToken');
        const showMembers = async () => {
            if (token) {
                if (user && user.token && id) {
                    const {data, check} = await channelProvider.getChannel(user.token, id.toString());
                    if (check) {
                        setChannel(data);
                        const {data: users} = await authProvider.getAllUsers(user.token);
                        setUsers(users);
                        console.log('Opération réussi');
                    } else {
                        console.error('Failed to get channel');
                    }
                }
            } else {
                await router.push('/login');
            }
        };
        showMembers();
    }, [router]);

    const formDefaultValues: {members: string[]} = {
        members: []
    };

    const { register, handleSubmit, reset } = useForm<{members: string[]}>({
        defaultValues: formDefaultValues
    });

    const [membersArray, setMembersArray] = useState<string[]>([]);

    const handleCheckboxChange = (userId: string) => {
        if (membersArray.includes(userId)) {
            setMembersArray(membersArray.filter(id => id !== userId));
        } else {
            setMembersArray([...membersArray, userId]);
        }
    };

    const onSubmit = (infos: {members: string[]}) => {
        const addNewMember = async () => {
            if (user && user.token && channel) {
                const {check} = await channelProvider.addMember(user.token, channel?.id, infos);
                if (check) {
                    reset();
                    toast({
                        title: 'Ajouté avec succes',
                        status: 'success',
                        duration: 3000,
                        isClosable: true,
                    })
                    router.push('/channel/'+channel.id);
                } else {
                    toast({
                        title: 'Erreur',
                        description: 'Veuillez réessayez plus tard',
                        status: 'error',
                        duration: 3000,
                        isClosable: true,
                    })
                }
            }
        };
        addNewMember();
    };

    return (
        <>
            <Head>
                <title>Login</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={`${createChannelStyle.main} ${inter.className}`}>
                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginBlock: '10px'}}>
                    <Button colorScheme='teal' variant='solid' onClick={() => router.push('/profile')}>
                        <TiArrowBack/>
                    </Button>
                    <Text fontSize='l' color='teal' style={{ marginLeft: '20px' }}>Retour</Text>
                </div>
                <div className={createChannelStyle.container}>
                    <form className={createChannelStyle.form}>
                        <div style={{ width: '100%', display: 'flex', alignContent: 'center', marginBlock: 20 }}>
                            <Text fontSize='2xl' color='white' style={{ marginInline: 'auto' }}>{channel?.name}</Text>
                        </div>
                        <div style={{ width: '100%', height: 250, display: 'flex', flexDirection: 'column'}}>
                            <div style={{ width: '100%', height: '100%', overflow: 'auto' }}>
                                <div style={{ width: '100%', display: 'flex', alignContent: 'center', marginBlock: 5 }}>
                                    <Text fontSize='l' color='white' style={{ marginInline: 'auto' }}>Ajouter des membres</Text>
                                </div>
                                <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                                    {allUsers.map(item => (
                                        <div key={item.id} style={{ marginBlock: 5, display: 'flex', alignItems: 'center', marginLeft: 60 }}>
                                            <Checkbox
                                                checked={membersArray.includes(item.id.toString())}
                                                onChange={() => handleCheckboxChange(item.id.toString())}
                                            />
                                            <Text fontSize='sm' color='white' style={{ marginLeft: 5 }}>{item.name}</Text>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                        <input type="hidden" {...register('members')} value={JSON.stringify(formDefaultValues.members)} />
                        <div style={{ width: '100%', display: 'flex', justifyContent: 'center', marginBlock: 5 }}>
                            <Button className="editChannelButton" style={{ backgroundColor: palette.primaryPurple }} mr={3} onClick={handleSubmit(onSubmit)}>
                                Enregistrer
                            </Button>
                        </div>
                    </form>
                </div>
            </main>
        </>
    )
};

export default Edit;
