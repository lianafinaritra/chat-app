import Head from 'next/head'
import createChannelStyle from '@/styles/CreateChannel.module.css'
import {useForm} from "react-hook-form";
import {inter} from "@/pages/_app";
import {palette} from "@/theme/palette";
import {useRouter} from "next/router";
import {authProvider} from "@/services/providers/auth-provider";
import {LoginUser} from "@/services/types";
import { useAuthStore } from '@/services/stores/auth-store';
import {Button} from "@chakra-ui/button";
import {Card, CardBody, Text, Checkbox, useToast} from "@chakra-ui/react";
import {useChannelStore} from "@/services/stores/channel-store";
import {CreateChannel} from "@/services/types/channel";
import {channelProvider} from "@/services/providers/channel-provider";
import {useEffect, useState} from "react";
import {TiArrowBack} from "react-icons/ti";
import * as yup from "yup";
import {yupResolver} from "@hookform/resolvers/yup";

export default function Create() {
    const toast = useToast();
    const { user, allUsers, setUsers } = useAuthStore();
    const { setChannels } = useChannelStore();

    const {push} = useRouter();

    const formDefaultValues: CreateChannel = {
        name: '',
        type: 'public',
        members: []
    };

    const validationSchema = yup.object().shape({
        name: yup.string().required('Ce champ est requis'),
    });

    const { register, handleSubmit, reset, formState: {errors} } = useForm<CreateChannel>({
        defaultValues: formDefaultValues,
        resolver: yupResolver(validationSchema)
    });
    const validateType = (value: string) => {
        return value === 'public' || value === 'private' || 'Le champ "type" est requis';
    };

    const [membersArray, setMembersArray] = useState<string[]>([]);

    const handleCheckboxChange = (userId: string) => {
        if (membersArray.includes(userId)) {
            setMembersArray(membersArray.filter(id => id !== userId));
        } else {
            setMembersArray([...membersArray, userId]);
        }
    };

    useEffect(() => {
        const token = localStorage.getItem('accessToken');
        const showUsers = async () => {
            if (token) {
            if (user && user.token) {
                const {data, check} = await authProvider.getAllUsers(user.token);
                if (check) {
                    setUsers(data);
                    console.log('Opération réussi');
                } else {
                    console.error('Failed to get Users');
                }
            }
            } else {
                await push('/login');
            }
        }
        showUsers();
    }, [push]);

    const onSubmit = (infos: CreateChannel) => {
        const submit = async () => {
            if (user && user.token) {
                const { data: newChannel, check } = await channelProvider.createChannel( user?.token ,{...infos, members: membersArray});
                if (check) {
                    toast({
                        title: 'Ajouté avec success',
                        status: 'success',
                        duration: 3000,
                        isClosable: true,
                    })
                    const { data } = await channelProvider.getAllChannels( user?.token);
                    setChannels(data);
                    await push('/channel/'+newChannel.id);
                    reset();
                } else {
                    toast({
                        title: 'Erreur',
                        description: 'Veuillez réessayez plus tard',
                        status: 'error',
                        duration: 3000,
                        isClosable: true,
                    })
                }
            }
        };
        submit();
    };

    return (
        <>
            <Head>
                <title>Nouveau Groupe</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={`${createChannelStyle.main} ${inter.className}`}>
                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginBlock: '10px'}}>
                    <Button colorScheme='teal' variant='solid' onClick={() => push('/profile')}>
                        <TiArrowBack/>
                    </Button>
                    <Text fontSize='l' color='teal' style={{ marginLeft: '20px' }}>Retour</Text>
                </div>
                <div className={createChannelStyle.container}>
                    <form className={createChannelStyle.form}>
                        <div style={{ width: '100%', display: 'flex', alignContent: 'center', marginBlock: 20 }}>
                            <Text fontSize='2xl' color='white' style={{ marginInline: 'auto' }}>Créer un nouveau groupe de Discussion</Text>
                        </div>
                        <div className="relative z-0 w-4/5 mx-auto mb-7 group">
                            <input type="email" id="floating_email"
                                   className="block py-2.5 px-0 w-full text-sm text-gray-400 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-purple-600 focus:outline-none focus:ring-0 focus:border-purple-600 peer"
                                   placeholder=" " required {...register('name')}/>
                            <label htmlFor="floating_email"
                                   className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-purple-600 peer-focus:dark:text-purple-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">
                                Nom de la discussion
                            </label>
                            {errors.name && <Text fontSize='sm' color='red'>{errors.name?.message}</Text>}
                        </div>
                        <div className="relative z-0 w-4/5 mx-auto mb-7 group">
                            <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2"
                                   htmlFor="grid-state">
                                Type
                            </label>
                            <div className="relative">
                                <select
                                    className="block py-2.5 px-0 w-full text-sm text-gray-400 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-purple-600 focus:outline-none focus:ring-0 focus:border-purple-600 peer"
                                    id="grid-state" required {...register('type', { validate: validateType })}>
                                    <option value="public">Public</option>
                                    <option value="private">Private</option>
                                </select>
                            </div>
                        </div>
                        <div style={{ width: '100%', height: 250, display: 'flex', flexDirection: 'column'}}>
                            <div style={{ width: '100%', height: '100%', overflow: 'auto' }}>
                                <div style={{ width: '100%', display: 'flex', alignContent: 'center', marginBlock: 5 }}>
                                    <Text fontSize='l' color='white' style={{ marginInline: 'auto' }}>Ajouter des membres</Text>
                                </div>
                                <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                                    {allUsers.map(item => (
                                        <div key={item.id} style={{ marginBlock: 5, display: 'flex', alignItems: 'center', marginLeft: 60 }}>
                                            <Checkbox
                                                checked={membersArray.includes(item.id.toString())}
                                                onChange={() => handleCheckboxChange(item.id.toString())}
                                            />
                                            <Text fontSize='sm' color='white' style={{ marginLeft: 5 }}>{item.name}</Text>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                        <input type="hidden" {...register('members')} value={JSON.stringify(formDefaultValues.members)} />
                        <div style={{ width: '100%', display: 'flex', justifyContent: 'center', marginBlock: 5 }}>
                        <Button style={{ backgroundColor: palette.primaryPurple }} mr={3} className="createChannelButton" onClick={handleSubmit(onSubmit)}>
                            Enregistrer
                        </Button>
                        </div>
                    </form>
                </div>
            </main>
        </>
    )
}
