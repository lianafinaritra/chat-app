import Head from 'next/head'
import profileStyle from '@/styles/Profile.module.css'
import {Button} from "@chakra-ui/button";
import {useForm} from "react-hook-form";
import {inter} from "@/pages/_app";
import {palette} from "@/theme/palette";
import {useRouter} from "next/router";
import {authProvider} from "@/services/providers/auth-provider";
import {UpdateUser} from "@/services/types";
import { useAuthStore } from '@/services/stores/auth-store';
import {
    Drawer,
    DrawerBody,
    DrawerContent,
    DrawerHeader,
    DrawerOverlay,
    Text,
    useDisclosure,
    useToast
} from "@chakra-ui/react";
import {Avatar} from "@chakra-ui/avatar";
import {TiArrowBack} from "react-icons/ti";
import {AiOutlineMenu} from "react-icons/ai";
import {HiOutlineUserGroup} from "react-icons/hi";
import {TbLogout} from "react-icons/tb";
import Link from 'next/link';
import {logout} from "@/pages/utils/logout";
import {useEffect} from "react";
import {messageProvider} from "@/services/providers/message-provider";
import {router} from "next/client";
import * as yup from "yup";
import {yupResolver} from "@hookform/resolvers/yup";

export default function Profile() {
    const toast = useToast();
    const { user } = useAuthStore();

    const formDefaultValues: UpdateUser = {
        name: '',
        oldPassword: '',
        password: '',
        bio: ''
    };

    const validationSchema = yup.object().shape({
        name: yup.string().required('Ce champ est requis'),
        oldPassword: yup.string().required('Ce champ est requis'),
        password: yup.string().required('Ce champ est requis'),
    });

    const { register, handleSubmit, formState: {errors} } = useForm<UpdateUser>({
        defaultValues: formDefaultValues,
        resolver: yupResolver(validationSchema)
    });
    const { setUser } = useAuthStore();
    const router = useRouter();

    useEffect(() => {
        const token = localStorage.getItem('accessToken');
            if (!token) {
                router.push('/login');
            }
    }, [router]);

    const onSubmit = (infos: UpdateUser) => {
        if (user && user.token) {
            const login = async () => {
                const {data, check} = await authProvider.updateUser(user?.token, infos);
                if (check) {
                    setUser(data);
                    toast({
                        title: 'Ajouté avec success',
                        status: 'success',
                        duration: 3000,
                        isClosable: true,
                    })
                } else {
                    toast({
                        title: 'Erreur',
                        description: 'Veuillez réessayez plus tard',
                        status: 'error',
                        duration: 3000,
                        isClosable: true,
                    })
                }
            };
            login();
        }
    };

    const { isOpen: openDrawer, onOpen: onOpenDrawer, onClose: onCloseDrawer } = useDisclosure()

    return (
        <>
            <Head>
                <title>Profile</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={`${profileStyle.main} ${inter.className}`}>
                <div className={profileStyle.navbar}>
                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', width: '200px', height: '100%', marginLeft: '20px' }}>
                        <div style={{ width: '40%', display: 'flex', justifyContent: 'center' }}>
                            <Button colorScheme='teal' variant='solid' onClick={onOpenDrawer}>
                                <AiOutlineMenu/>
                            </Button>
                            <Drawer placement={'left'} onClose={onCloseDrawer} isOpen={openDrawer}>
                                <DrawerOverlay />
                                <DrawerContent>
                                    <DrawerHeader borderBottomWidth='1px'>Messages de Groupes</DrawerHeader>
                                    <DrawerBody>
                                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginBlock: '20px'}}>
                                            <Button colorScheme='teal' variant='solid' onClick={() => router.push('/channel/create')}>
                                                <TiArrowBack/>
                                            </Button>
                                            <Text fontSize='l' color='teal' style={{ marginLeft: '20px' }}>Créer un nouveau groupe</Text>
                                        </div>
                                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginBlock: '20px'}}>
                                            <Button colorScheme='teal' variant='solid' onClick={() => router.push('/channel/1')}>
                                                <TiArrowBack/>
                                            </Button>
                                            <Text fontSize='l' color='teal' style={{ marginLeft: '20px' }}>Messages de Groupes</Text>
                                        </div>
                                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginBlock: '20px'}}>
                                            <Button colorScheme='teal' variant='solid' onClick={() => router.push('/message/1')}>
                                                <HiOutlineUserGroup/>
                                            </Button>
                                            <Text fontSize='l' color='teal' style={{ marginLeft: '20px' }}>Message Privée</Text>
                                        </div>
                                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginBlock: '20px'}}>
                                            <Button colorScheme='teal' variant='solid' onClick={logout}>
                                                <TbLogout/>
                                            </Button>
                                            <Text fontSize='l' color='teal' style={{ marginLeft: '20px' }}>Déconnexion</Text>
                                        </div>
                                    </DrawerBody>
                                </DrawerContent>
                            </Drawer>
                        </div>
                        <Text color='white'>Mamaly.io</Text>
                    </div>
                    <div style={{ marginLeft: 450 }}>
                        <Text color='white'>PROFIL UTILISATEUR</Text>
                    </div>
                    <div style={{ marginLeft: 650 }}>
                        <Button colorScheme='teal' variant='solid' onClick={logout}>
                            <TbLogout/>
                        </Button>
                    </div>
                </div>
                <div className={profileStyle.container}>
                    <form className={profileStyle.form}>
                        <div className={profileStyle.formContainer}>
                            <div className="relative z-0 w-3/5 mx-auto mb-7 group">
                                <input type="text" id="floating_name"
                                       className="block py-2.5 px-0 w-full text-sm text-gray-400 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-purple-600 focus:outline-none focus:ring-0 focus:border-purple-600 peer"
                                       placeholder=" " required {...register("name")}/>
                                <label htmlFor="floating_name"
                                       className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-purple-600 peer-focus:dark:text-purple-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Nom
                                </label>
                                {errors.name && <Text fontSize='sm' color='red'>{errors.name?.message}</Text>}
                            </div>
                            <div className="relative z-0 w-3/5 mx-auto mb-7 group">
                                <input type="password" id="floating_password"
                                       className="block py-2.5 px-0 w-full text-sm text-gray-400 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-purple-600 focus:outline-none focus:ring-0 focus:border-purple-600 peer"
                                       placeholder=" " required {...register("oldPassword")}/>
                                <label htmlFor="floating_password"
                                       className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-purple-600 peer-focus:dark:text-purple-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Ancien mot de passe</label>
                                {errors.oldPassword && <Text fontSize='sm' color='red'>{errors.oldPassword?.message}</Text>}
                            </div>
                            <div className="relative z-0 w-3/5 mx-auto mb-7 group">
                                <input type="password" id="floating_email"
                                       className="block py-2.5 px-0 w-full text-sm text-gray-400 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-purple-600 focus:outline-none focus:ring-0 focus:border-purple-600 peer"
                                       placeholder=" " required {...register("password")}/>
                                <label htmlFor="floating_email"
                                       className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-purple-600 peer-focus:dark:text-purple-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Nouveau mot de passe
                                </label>
                                {errors.password && <Text fontSize='sm' color='red'>{errors.password?.message}</Text>}
                            </div>
                            <div className="relative z-0 w-3/5 mx-auto mb-7 group">
                                <input type="email" id="floating_email"
                                       className="block py-2.5 px-0 w-full text-sm text-gray-400 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-purple-600 focus:outline-none focus:ring-0 focus:border-purple-600 peer"
                                       placeholder=" " required {...register("bio")}/>
                                <label htmlFor="floating_email"
                                       className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-purple-600 peer-focus:dark:text-purple-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Biographie
                                </label>
                            </div>
                            <div className={profileStyle.submit}>
                                <Button
                                    mt={1}
                                    colorScheme='teal'
                                    type='submit'
                                    onClick={handleSubmit(onSubmit)}
                                    className="updateProfileButton"
                                    style={{ backgroundColor: palette.primaryPurple, fontSize: '14px', color: 'white', marginBlock: 'auto', width: '40%', borderRadius: '50px', marginLeft: '30%', boxShadow: "0 0 7px 7px rgba(170, 119, 255, 0.5)"}}
                                >
                                    Envoyer
                                </Button>
                            </div>
                        </div>
                    </form>
                    <div className={profileStyle.presentation}>
                        <div style={{width: '100%', display: 'flex', justifyContent: 'center', marginBottom: '20px'}}>
                            <Avatar bg='teal.500' size="2xl"/>
                        </div>
                        <Text style={{ marginBottom: '10px' }} fontSize='2xl' color='white'>{user?.name}</Text>
                        <Text fontSize='2xl' color='white'>{user?.email}</Text>
                    </div>
                </div>
            </main>
        </>
    )
}
